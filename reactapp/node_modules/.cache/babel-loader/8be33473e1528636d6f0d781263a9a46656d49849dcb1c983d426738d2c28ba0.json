{"ast":null,"code":"// import React, { useState } from \"react\";\n// import './ApplyForm.css';\n\n// function ApplyForm() {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     spices: \"\",\n//     experience: \"\",\n//     storeLocation: \"\",\n//     phoneNumber: \"\",\n//     email: \"\"\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//     setErrors({ ...errors, [e.target.name]: \"\" });\n//   };\n\n//   const validate = () => {\n//     let newErrors = {};\n//     const namePattern = /^[a-zA-Z\\s]+$/;\n//     const phonePattern = /^[0-9]{10}$/;\n\n//     if (!formData.name) newErrors.name = \"Name is required\";\n//     else if (!namePattern.test(formData.name.trim()))\n//       newErrors.name = \"Name must not contain special characters or numbers\";\n\n//     if (!formData.email) newErrors.email = \"Email is required\";\n//     else if (!/\\S+@\\S+\\.\\S+/.test(formData.email))\n//       newErrors.email = \"Invalid email format\";\n\n//     if (!formData.spices) newErrors.spices = \"Spices are required\";\n//     if (!formData.experience) newErrors.experience = \"Experience is required\";\n//     if (!formData.storeLocation)\n//       newErrors.storeLocation = \"Store location is required\";\n\n//     if (!formData.phoneNumber)\n//       newErrors.phoneNumber = \"Phone Number is required\";\n//     else if (!phonePattern.test(formData.phoneNumber.trim()))\n//       newErrors.phoneNumber = \"Phone number must contain exactly 10 digits\";\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validate()) return;\n\n//     const guestId = localStorage.getItem(\"userId\");\n\n//     try {\n//       await fetch(`http://localhost:5001/evaluator/apply?guestId=${guestId}`, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData)\n//       });\n//       setSuccessMessage(\"✅ Application submitted successfully!\");\n//       setFormData({ name: \"\", spices: \"\", experience: \"\", storeLocation: \"\", phoneNumber: \"\", email: \"\" });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"apply-page\">\n//       <h2 className=\"apply-title\">Apply to Get a Franchise</h2>\n//       <form className=\"apply-form\" onSubmit={handleSubmit}>\n//         <label>Name:</label>\n//         <input name=\"name\" value={formData.name} onChange={handleChange} placeholder=\"Enter your Name\" />\n//         {errors.name && <p className=\"error\">{errors.name}</p>}\n\n//         <label>Email:</label>\n//         <input name=\"email\" value={formData.email} onChange={handleChange} placeholder=\"Enter email\" />\n//         {errors.email && <p className=\"error\">{errors.email}</p>}\n\n//         <label>Spices:</label>\n//         <input name=\"spices\" value={formData.spices} onChange={handleChange} placeholder=\"Enter spices, comma separated\" />\n//         {errors.spices && <p className=\"error\">{errors.spices}</p>}\n\n//         <label>Experience:</label>\n//         <input name=\"experience\" value={formData.experience} onChange={handleChange} placeholder=\"Experience in years\" />\n//         {errors.experience && <p className=\"error\">{errors.experience}</p>}\n\n//         <label>Store Location:</label>\n//         <input name=\"storeLocation\" value={formData.storeLocation} onChange={handleChange} placeholder=\"Enter store location\" />\n//         {errors.storeLocation && <p className=\"error\">{errors.storeLocation}</p>}\n\n//         <label>Phone Number:</label>\n//         <input name=\"phoneNumber\" value={formData.phoneNumber} onChange={handleChange} placeholder=\"Enter phone number\" />\n//         {errors.phoneNumber && <p className=\"error\">{errors.phoneNumber}</p>}\n\n//         <button type=\"submit\">Submit Application</button>\n//       </form>\n//       {successMessage && <p className=\"success\">{successMessage}</p>}\n//     </div>\n//   );\n// }\n\n// export default ApplyForm;","map":{"version":3,"names":[],"sources":["/Users/krishnakumar/Desktop/FMA/reactapp/src/components/ApplyForm.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import './ApplyForm.css';\n\n// function ApplyForm() {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     spices: \"\",\n//     experience: \"\",\n//     storeLocation: \"\",\n//     phoneNumber: \"\",\n//     email: \"\"\n//   });\n\n//   const [errors, setErrors] = useState({});\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//     setErrors({ ...errors, [e.target.name]: \"\" });\n//   };\n\n//   const validate = () => {\n//     let newErrors = {};\n//     const namePattern = /^[a-zA-Z\\s]+$/;\n//     const phonePattern = /^[0-9]{10}$/;\n\n//     if (!formData.name) newErrors.name = \"Name is required\";\n//     else if (!namePattern.test(formData.name.trim()))\n//       newErrors.name = \"Name must not contain special characters or numbers\";\n\n//     if (!formData.email) newErrors.email = \"Email is required\";\n//     else if (!/\\S+@\\S+\\.\\S+/.test(formData.email))\n//       newErrors.email = \"Invalid email format\";\n\n//     if (!formData.spices) newErrors.spices = \"Spices are required\";\n//     if (!formData.experience) newErrors.experience = \"Experience is required\";\n//     if (!formData.storeLocation)\n//       newErrors.storeLocation = \"Store location is required\";\n\n//     if (!formData.phoneNumber)\n//       newErrors.phoneNumber = \"Phone Number is required\";\n//     else if (!phonePattern.test(formData.phoneNumber.trim()))\n//       newErrors.phoneNumber = \"Phone number must contain exactly 10 digits\";\n\n//     setErrors(newErrors);\n//     return Object.keys(newErrors).length === 0;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!validate()) return;\n\n//     const guestId = localStorage.getItem(\"userId\");\n\n//     try {\n//       await fetch(`http://localhost:5001/evaluator/apply?guestId=${guestId}`, {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify(formData)\n//       });\n//       setSuccessMessage(\"✅ Application submitted successfully!\");\n//       setFormData({ name: \"\", spices: \"\", experience: \"\", storeLocation: \"\", phoneNumber: \"\", email: \"\" });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"apply-page\">\n//       <h2 className=\"apply-title\">Apply to Get a Franchise</h2>\n//       <form className=\"apply-form\" onSubmit={handleSubmit}>\n//         <label>Name:</label>\n//         <input name=\"name\" value={formData.name} onChange={handleChange} placeholder=\"Enter your Name\" />\n//         {errors.name && <p className=\"error\">{errors.name}</p>}\n\n//         <label>Email:</label>\n//         <input name=\"email\" value={formData.email} onChange={handleChange} placeholder=\"Enter email\" />\n//         {errors.email && <p className=\"error\">{errors.email}</p>}\n\n//         <label>Spices:</label>\n//         <input name=\"spices\" value={formData.spices} onChange={handleChange} placeholder=\"Enter spices, comma separated\" />\n//         {errors.spices && <p className=\"error\">{errors.spices}</p>}\n\n//         <label>Experience:</label>\n//         <input name=\"experience\" value={formData.experience} onChange={handleChange} placeholder=\"Experience in years\" />\n//         {errors.experience && <p className=\"error\">{errors.experience}</p>}\n\n//         <label>Store Location:</label>\n//         <input name=\"storeLocation\" value={formData.storeLocation} onChange={handleChange} placeholder=\"Enter store location\" />\n//         {errors.storeLocation && <p className=\"error\">{errors.storeLocation}</p>}\n\n//         <label>Phone Number:</label>\n//         <input name=\"phoneNumber\" value={formData.phoneNumber} onChange={handleChange} placeholder=\"Enter phone number\" />\n//         {errors.phoneNumber && <p className=\"error\">{errors.phoneNumber}</p>}\n\n//         <button type=\"submit\">Submit Application</button>\n//       </form>\n//       {successMessage && <p className=\"success\">{successMessage}</p>}\n//     </div>\n//   );\n// }\n\n// export default ApplyForm;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}