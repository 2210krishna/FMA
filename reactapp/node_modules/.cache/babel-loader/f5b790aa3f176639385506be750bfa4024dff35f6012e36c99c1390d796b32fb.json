{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"./EmployeeTable.css\";\n\n// export default function EmployeeTable() {\n//   const [employees, setEmployees] = useState([]);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     email: \"\",\n//     phone: \"\",\n//     role: \"\",\n//     location: \"\",\n//   });\n//   const [search, setSearch] = useState(\"\");\n//   const [editId, setEditId] = useState(null);\n\n//   // Fetch all employees\n//   const fetchEmployees = async () => {\n//     try {\n//       const res = await fetch(\"http://localhost:5001/employees\");\n//       const data = await res.json();\n//       setEmployees(data);\n//     } catch (err) {\n//       console.error(\"Error fetching employees:\", err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchEmployees();\n//   }, []);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       if (editId) {\n//         await fetch(`http://localhost:5001/employees/${editId}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setEditId(null);\n//       } else {\n//         await fetch(\"http://localhost:5001/employees\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//       }\n\n//       setFormData({ name: \"\", email: \"\", phone: \"\", role: \"\", location: \"\" });\n//       fetchEmployees();\n//     } catch (err) {\n//       console.error(\"Error saving employee:\", err);\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     const confirmDelete = window.confirm(\"Are you sure you want to delete this employee?\");\n//     if (!confirmDelete) return;\n\n//     try {\n//       await fetch(`http://localhost:5001/employees/${id}`, {\n//         method: \"DELETE\",\n//       });\n//       fetchEmployees();\n//     } catch (err) {\n//       console.error(\"Error deleting employee:\", err);\n//     }\n//   };\n\n//   const handleEdit = (emp) => {\n//     setFormData({\n//       name: emp.name,\n//       email: emp.email,\n//       phone: emp.phone,\n//       role: emp.role,\n//       location: emp.location,\n//     });\n//     setEditId(emp.id);\n//   };\n\n//   const filteredEmployees = employees.filter(\n//     (emp) =>\n//       emp.name.toLowerCase().includes(search.toLowerCase()) ||\n//       emp.email.toLowerCase().includes(search.toLowerCase()) ||\n//       emp.role.toLowerCase().includes(search.toLowerCase()) ||\n//       (emp.location && emp.location.toLowerCase().includes(search.toLowerCase()))\n//   );\n\n//   return (\n//     <div className=\"employee-container\">\n//       <h2>Employee Management</h2>\n\n//       {/* Search */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search by name, email, role or location...\"\n//         value={search}\n//         onChange={(e) => setSearch(e.target.value)}\n//         className=\"search-input\"\n//       />\n\n//       {/* Add / Edit Form */}\n//       <form onSubmit={handleSubmit} className=\"add-form\">\n//   <input\n//     type=\"text\"\n//     name=\"name\"\n//     placeholder=\"Name\"\n//     value={formData.name}\n//     onChange={handleChange}\n//     required\n//   />\n//   <input\n//     type=\"email\"\n//     name=\"email\"\n//     placeholder=\"Email\"\n//     value={formData.email}\n//     onChange={handleChange}\n//     required\n//   />\n//   <input\n//     type=\"text\"\n//     name=\"phone\"\n//     placeholder=\"Phone\"\n//     value={formData.phone}\n//     onChange={handleChange}\n//     required\n//   />\n\n//   {/* Wrap Role and Location in flex container */}\n//   <div className=\"role-location-row\">\n//     <select\n//       name=\"role\"\n//       value={formData.role}\n//       onChange={handleChange}\n//       required\n//     >\n//       <option value=\"\">Select Role</option>\n//       <option value=\"EVALUATOR\">Evaluator</option>\n//       <option value=\"TERRITORY_MANAGER\">Territory Manager</option>\n//       <option value=\"FRANCHISE_MANAGER\">Franchise Manager</option>\n//     </select>\n\n//     <select\n//       name=\"location\"\n//       value={formData.location}\n//       onChange={handleChange}\n//       required\n//     >\n//       <option value=\"\">Select Location</option>\n//       <option value=\"Tamil Nadu\">Tamil Nadu</option>\n//       <option value=\"Kerala\">Kerala</option>\n//       <option value=\"Karnataka\">Karnataka</option>\n//       <option value=\"Andhra Pradesh\">Andhra Pradesh</option>\n//       <option value=\"Telangana\">Telangana</option>\n//     </select>\n//   </div>\n\n//   <button type=\"submit\">\n//     {editId ? \"Update Employee\" : \"Add Employee\"}\n//   </button>\n// </form>\n\n//       {/* Employee Table */}\n//       <div className=\"table-wrapper\">\n//         <table>\n//           <thead>\n//             <tr className=\"sticky\">\n//               <th style={{ width: \"60px\" }}>ID</th>\n//               <th>Name</th>\n//               <th>Email</th>\n//               <th>Phone</th>\n//               <th>Role</th>\n//               <th>Location</th>\n//               <th style={{ width: \"160px\" }}>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {filteredEmployees.length > 0 ? (\n//               filteredEmployees.map((emp) => (\n//                 <tr key={emp.id}>\n//                   <td data-label=\"ID\">{emp.id}</td>\n//                   <td data-label=\"Name\">{emp.name}</td>\n//                   <td data-label=\"Email\">{emp.email}</td>\n//                   <td data-label=\"Phone\">{emp.phone}</td>\n//                   <td data-label=\"Role\">{emp.role}</td>\n//                   <td data-label=\"Location\">{emp.location}</td>\n//                   <td data-label=\"Actions\">\n//                     <div className=\"action-buttons\">\n//                       <button\n//                         className=\"edit-btn\"\n//                         onClick={() => handleEdit(emp)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"delete-btn\"\n//                         onClick={() => handleDelete(emp.id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"7\">No employees found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/krishnakumar/Desktop/FMA/reactapp/src/components/EmployeeTable.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"./EmployeeTable.css\";\n\n// export default function EmployeeTable() {\n//   const [employees, setEmployees] = useState([]);\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     email: \"\",\n//     phone: \"\",\n//     role: \"\",\n//     location: \"\",\n//   });\n//   const [search, setSearch] = useState(\"\");\n//   const [editId, setEditId] = useState(null);\n\n//   // Fetch all employees\n//   const fetchEmployees = async () => {\n//     try {\n//       const res = await fetch(\"http://localhost:5001/employees\");\n//       const data = await res.json();\n//       setEmployees(data);\n//     } catch (err) {\n//       console.error(\"Error fetching employees:\", err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchEmployees();\n//   }, []);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     try {\n//       if (editId) {\n//         await fetch(`http://localhost:5001/employees/${editId}`, {\n//           method: \"PUT\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//         setEditId(null);\n//       } else {\n//         await fetch(\"http://localhost:5001/employees\", {\n//           method: \"POST\",\n//           headers: { \"Content-Type\": \"application/json\" },\n//           body: JSON.stringify(formData),\n//         });\n//       }\n\n//       setFormData({ name: \"\", email: \"\", phone: \"\", role: \"\", location: \"\" });\n//       fetchEmployees();\n//     } catch (err) {\n//       console.error(\"Error saving employee:\", err);\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     const confirmDelete = window.confirm(\"Are you sure you want to delete this employee?\");\n//     if (!confirmDelete) return;\n\n//     try {\n//       await fetch(`http://localhost:5001/employees/${id}`, {\n//         method: \"DELETE\",\n//       });\n//       fetchEmployees();\n//     } catch (err) {\n//       console.error(\"Error deleting employee:\", err);\n//     }\n//   };\n\n//   const handleEdit = (emp) => {\n//     setFormData({\n//       name: emp.name,\n//       email: emp.email,\n//       phone: emp.phone,\n//       role: emp.role,\n//       location: emp.location,\n//     });\n//     setEditId(emp.id);\n//   };\n\n//   const filteredEmployees = employees.filter(\n//     (emp) =>\n//       emp.name.toLowerCase().includes(search.toLowerCase()) ||\n//       emp.email.toLowerCase().includes(search.toLowerCase()) ||\n//       emp.role.toLowerCase().includes(search.toLowerCase()) ||\n//       (emp.location && emp.location.toLowerCase().includes(search.toLowerCase()))\n//   );\n\n//   return (\n//     <div className=\"employee-container\">\n//       <h2>Employee Management</h2>\n\n//       {/* Search */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search by name, email, role or location...\"\n//         value={search}\n//         onChange={(e) => setSearch(e.target.value)}\n//         className=\"search-input\"\n//       />\n\n//       {/* Add / Edit Form */}\n//       <form onSubmit={handleSubmit} className=\"add-form\">\n//   <input\n//     type=\"text\"\n//     name=\"name\"\n//     placeholder=\"Name\"\n//     value={formData.name}\n//     onChange={handleChange}\n//     required\n//   />\n//   <input\n//     type=\"email\"\n//     name=\"email\"\n//     placeholder=\"Email\"\n//     value={formData.email}\n//     onChange={handleChange}\n//     required\n//   />\n//   <input\n//     type=\"text\"\n//     name=\"phone\"\n//     placeholder=\"Phone\"\n//     value={formData.phone}\n//     onChange={handleChange}\n//     required\n//   />\n\n//   {/* Wrap Role and Location in flex container */}\n//   <div className=\"role-location-row\">\n//     <select\n//       name=\"role\"\n//       value={formData.role}\n//       onChange={handleChange}\n//       required\n//     >\n//       <option value=\"\">Select Role</option>\n//       <option value=\"EVALUATOR\">Evaluator</option>\n//       <option value=\"TERRITORY_MANAGER\">Territory Manager</option>\n//       <option value=\"FRANCHISE_MANAGER\">Franchise Manager</option>\n//     </select>\n\n//     <select\n//       name=\"location\"\n//       value={formData.location}\n//       onChange={handleChange}\n//       required\n//     >\n//       <option value=\"\">Select Location</option>\n//       <option value=\"Tamil Nadu\">Tamil Nadu</option>\n//       <option value=\"Kerala\">Kerala</option>\n//       <option value=\"Karnataka\">Karnataka</option>\n//       <option value=\"Andhra Pradesh\">Andhra Pradesh</option>\n//       <option value=\"Telangana\">Telangana</option>\n//     </select>\n//   </div>\n\n//   <button type=\"submit\">\n//     {editId ? \"Update Employee\" : \"Add Employee\"}\n//   </button>\n// </form>\n\n//       {/* Employee Table */}\n//       <div className=\"table-wrapper\">\n//         <table>\n//           <thead>\n//             <tr className=\"sticky\">\n//               <th style={{ width: \"60px\" }}>ID</th>\n//               <th>Name</th>\n//               <th>Email</th>\n//               <th>Phone</th>\n//               <th>Role</th>\n//               <th>Location</th>\n//               <th style={{ width: \"160px\" }}>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {filteredEmployees.length > 0 ? (\n//               filteredEmployees.map((emp) => (\n//                 <tr key={emp.id}>\n//                   <td data-label=\"ID\">{emp.id}</td>\n//                   <td data-label=\"Name\">{emp.name}</td>\n//                   <td data-label=\"Email\">{emp.email}</td>\n//                   <td data-label=\"Phone\">{emp.phone}</td>\n//                   <td data-label=\"Role\">{emp.role}</td>\n//                   <td data-label=\"Location\">{emp.location}</td>\n//                   <td data-label=\"Actions\">\n//                     <div className=\"action-buttons\">\n//                       <button\n//                         className=\"edit-btn\"\n//                         onClick={() => handleEdit(emp)}\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         className=\"delete-btn\"\n//                         onClick={() => handleDelete(emp.id)}\n//                       >\n//                         Delete\n//                       </button>\n//                     </div>\n//                   </td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"7\">No employees found</td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n//     </div>\n//   );\n// }\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}